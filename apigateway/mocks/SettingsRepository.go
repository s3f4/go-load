// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "github.com/s3f4/go-load/apigateway/models"
	mock "github.com/stretchr/testify/mock"
)

// SettingsRepository is an autogenerated mock type for the SettingsRepository type
type SettingsRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *SettingsRepository) Create(_a0 *models.Settings) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Settings) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *SettingsRepository) Delete(_a0 *models.Settings) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Settings) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: key
func (_m *SettingsRepository) Get(key string) (*models.Settings, error) {
	ret := _m.Called(key)

	var r0 *models.Settings
	if rf, ok := ret.Get(0).(func(string) *models.Settings); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Settings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *SettingsRepository) Update(_a0 *models.Settings) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Settings) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

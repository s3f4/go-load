version: "3.8"
services:
  apigateway:
    image: registry.dev:5000/apigateway
    ports:
      - 3001:3001
    volumes:
      - ./apigateway:/app
      - ./registry.crt:/app/registry.crt
      - ./registry.key:/app/registry.key
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/.ssh/id_rsa:/root/.ssh/id_rsa
      - ~/.ssh/id_rsa.pub:/root/.ssh/id_rsa.pub
    environment:
      - APP_ENV=development-swarm
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=go-load
      - MYSQL_USER=goload
      - MYSQL_PASSWORD=go-load12345
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=timescaledb_example
      - POSTGRES_HOST=timeDB
      - POSTGRES_PORT=5432
      - POSTGRES_DATABASE=data
      - RABBITMQ_USER=user
      - RABBITMQ_PASSWORD=password
      - RABBITMQ_HOST=queue
      - RABBITMQ_PORT=5672
      - WAIT_HOSTS_TIMEOUT=120
      - AUTH_ACCESS_SECRET=abc13253
      - AUTH_REFRESH_SECRET=abc13253
      - REDIS_SERVER_PASSWORD=redisPass123
      - CSRF_KEY=abc13253
      - AT_EXPIRE_MINUTES=10
      - RT_EXPIRE_MINUTES=10080
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.labels.role==master"
      restart_policy:
        condition: on-failure

  eventhandler:
    image: registry.dev:5000/eventhandler
    environment:
      - APP_ENV=development-swarm
      - RABBITMQ_USER=user
      - RABBITMQ_PASSWORD=password
      - RABBITMQ_HOST=queue
      - RABBITMQ_PORT=5672
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=timescaledb_example
      - POSTGRES_HOST=timeDB
      - POSTGRES_PORT=5432
      - POSTGRES_DATABASE=data
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.labels.role==master"
      restart_policy:
        condition: on-failure

  web:
    image: registry.dev:5000/web
    ports:
      - 3000:3000
    environment:
      - CHOKIDAR_USEPOLLING=true
      - env_file=.env
    stdin_open: true
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.labels.role==master"
      restart_policy:
        condition: on-failure

  worker:
    image: registry.dev:5000/worker
    environment:
      - APP_ENV=development-swarm
      - RABBITMQ_USER=user
      - RABBITMQ_PASSWORD=password
      - RABBITMQ_HOST=queue
      - RABBITMQ_PORT=5672
    deploy:
      replicas: 0
      restart_policy:
        condition: on-failure

  timeDB:
    image: timescale/timescaledb:latest-pg12
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=timescaledb_example
      - POSTGRES_DB=data
    ports:
      - 5432:5432
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.labels.role==master"
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "root"]
      timeout: 120s
      interval: 10s
      retries: 10

  queue:
    image: rabbitmq:3-management
    ports:
      - 8080:15672
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.labels.role==master"
      restart_policy:
        condition: on-failure
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      timeout: 120s
      interval: 10s
      retries: 10

  pgAdmin:
    image: dpage/pgadmin4
    ports:
      - 8081:80
    environment:
      - PGADMIN_DEFAULT_EMAIL=test@test.com
      - PGADMIN_DEFAULT_PASSWORD=123456
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.labels.role==master"
      restart_policy:
        condition: on-failure

  mysql:
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: p123456
      MYSQL_DATABASE: go-load
      MYSQL_USER: goload
      MYSQL_PASSWORD: go-load12345
    ports:
      - 3306:3306
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.labels.role==master"
      restart_policy:
        condition: on-failure
    healthcheck:
      test: mysql --user=$$MYSQL_USER --password=$$MYSQL_PASSWORD -e 'SHOW DATABASES;'
      timeout: 120s
      interval: 10s
      retries: 10
    
  redis:
      image: redis
      container_name: redis
      restart: always
      ports:
        - 6379:6379
